on: push

# on:
#   release:
#     types: [created]

name: Release SDK & Utils (macos/linux)

jobs:
  build-sdk-helper-release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        rust:
          - stable
        llvm_version: [12, 13]
    env:
      C_SDK_VERSION: v0.1.0
      LLVM_VERSION: ${{ matrix.llvm_version }}
      TESTING_TAG: v0.0.0-local
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true

    - name: Cache Rust environment
      uses: Swatinem/rust-cache@v1

    - name: Install LLVM
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "${{ matrix.llvm_version }}.0"

    - name: Install missing LLVM deps
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-key adv --keyserver hkps://keyserver.ubuntu.com --recv-key C99B11DEB97541F0
        sudo apt-get update && sudo apt-get install -y libtinfo5 cmake
    
    - name: Check LLVM installation
      run: llvm-config --version

    - name: Install cargo-make
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: --debug cargo-make

    - name: Run cargo build, test, fmt, clippy
      env:
        LLVM_FEATURE: llvm${{ matrix.llvm_version }}-0
      run: cargo make ci-flow

    - name: Setup release build environment
      run: |
        C_SDK_VERSION=${{ env.C_SDK_VERSION }} \
        LLVM_VERSION=${{ env.LLVM_VERSION }} \
        TESTING_TAG=${{ env.TESTING_TAG }} \
        TAG=${{ github.ref_name }} \
        ./scripts/release/setup.sh

        cat .release-env >> $GITHUB_ENV

    - name: Install build environment dependencies
      uses: lukka/get-cmake@latest

    - name: Install xcode / devtools (macos)
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      if: matrix.os == 'macos-latest'

    - name: Build release artifacts
      run: ./scripts/release/build.sh

    - name: Collect release artifacts and build archive
      run: ./scripts/release/archive.sh

    - name: Upload archive to CI summary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.DIST }}-artifacts.zip
        path: |
          ${{ env.ARCHIVE }}
          ${{ env.CHECKSUM }}
    
    - name: Upload archive to Release ${{ env.TAG }}
      if: env.TAG != env.TESTING_TAG
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.ARCHIVE }}
          ${{ env.CHECKSUM }}
