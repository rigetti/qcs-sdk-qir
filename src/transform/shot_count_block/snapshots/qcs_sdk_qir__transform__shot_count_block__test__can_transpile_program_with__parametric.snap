---
source: src/transform/shot_count_block/mod.rs
expression: context.module.print_to_string().to_str().unwrap()

---
; ModuleID = 'qcs'
source_filename = "./test/fixtures/programs/parametric.ll"

%Qubit = type opaque
%Executable = type opaque
%ExecutionResult = type opaque

@parameter_memory_region_name = private unnamed_addr constant [12 x i8] c"__qir_param\00", align 1
@quil_program = private unnamed_addr constant [89 x i8] c"DECLARE ro BIT[0]\0ADECLARE __qir_param REAL[2]\0ARZ(__qir_param[0]) 0\0ARZ(__qir_param[1]) 0\0A\00", align 1

declare void @__quantum__qis__rz__body(double, %Qubit*) local_unnamed_addr

define internal fastcc void @QuantumApplication__Run__body() unnamed_addr {
entry:
  %0 = fadd double 1.000000e+00, 2.000000e+00
  br label %body_execution

body:                                             ; preds = %body, %body_execution
  %1 = phi i64 [ %2, %body ], [ 1, %body_execution ]
  %2 = add nuw nsw i64 %1, 1
  %3 = icmp ult i64 %1, 1000
  br i1 %3, label %body, label %body_cleanup

body_cleanup:                                     ; preds = %body
  call void @free_executable(%Executable* %4)
  call void @free_execution_result(%ExecutionResult* %5)
  br label %exit

body_execution:                                   ; preds = %entry, <null operand!>
  %4 = call %Executable* @executable_from_quil(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @quil_program, i32 0, i32 0))
  call void @wrap_in_shots(%Executable* %4, i32 1000)
  call void @set_param(%Executable* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @parameter_memory_region_name, i32 0, i32 0), i32 0, double %0)
  call void @set_param(%Executable* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @parameter_memory_region_name, i32 0, i32 0), i32 1, double 2.000000e+00)
  %5 = call %ExecutionResult* @execute_on_qvm(%Executable* %4)
  call void @panic_on_failure(%ExecutionResult* %5)
  br label %body

exit:                                             ; preds = %body_cleanup, <null operand!>
  ret void
}

declare %Executable* @executable_from_quil(i8*)

declare %ExecutionResult* @execute_on_qpu(%Executable*, i8*)

declare %ExecutionResult* @execute_on_qvm(%Executable*)

declare void @free_executable(%Executable*)

declare void @free_execution_result(%ExecutionResult*)

declare i1 @get_readout_bit(%ExecutionResult*, i64, i64)

declare void @panic_on_failure(%ExecutionResult*)

declare void @set_param(%Executable*, i8*, i32, double)

declare void @wrap_in_shots(%Executable*, i32)

