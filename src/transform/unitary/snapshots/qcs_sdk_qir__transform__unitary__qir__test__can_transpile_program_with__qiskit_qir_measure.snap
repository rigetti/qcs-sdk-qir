---
source: src/transform/unitary/qir.rs
expression: context.module.print_to_string().to_str().unwrap()
---
; ModuleID = 'qcs'
source_filename = "my-circuit"

%ExecutableCache = type opaque
%Result = type opaque
%Executable = type opaque
%ExecutionResult = type opaque
%Qubit = type opaque

@executable_cache = private global %ExecutableCache* null
@parameter_memory_region_name = private unnamed_addr constant [12 x i8] c"__qir_param\00", align 1
@quil_program = private unnamed_addr constant [89 x i8] c"DECLARE ro BIT[3]\0AH 0\0ACNOT 0 1\0ACNOT 1 2\0AMEASURE 0 ro[0]\0AMEASURE 1 ro[1]\0AMEASURE 2 ro[2]\0A\00", align 1

declare void @__quantum__rt__array_end_record_output()

declare void @__quantum__rt__array_start_record_output()

declare void @__quantum__rt__result_record_output(%Result*)

define void @main() #0 {
entry:
  call void @populate_executable_array()
  call void @__quantum__rt__array_start_record_output()
  call void @__quantum__rt__result_record_output(%Result* inttoptr (i64 2 to %Result*))
  call void @__quantum__rt__result_record_output(%Result* inttoptr (i64 1 to %Result*))
  call void @__quantum__rt__result_record_output(%Result* null)
  call void @__quantum__rt__array_end_record_output()
  br label %entry_execution

entry_cleanup:                                    ; preds = %entry_execution
  call void @free_execution_result(%ExecutionResult* %1)
  ret void

entry_execution:                                  ; preds = %entry
  %0 = call %Executable* @executable_from_quil(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @quil_program, i32 0, i32 0))
  %1 = call %ExecutionResult* @execute_on_qvm(%Executable* %0)
  call void @panic_on_failure(%ExecutionResult* %1)
  br label %entry_cleanup
}

declare void @__quantum__qis__h__body(%Qubit*)

declare void @__quantum__qis__cnot__body(%Qubit*, %Qubit*)

declare void @__quantum__qis__mz__body(%Qubit*, %Result*)

declare %Executable* @executable_from_quil(i8*)

declare %ExecutionResult* @execute_on_qpu(%Executable*, i8*)

declare %ExecutionResult* @execute_on_qvm(%Executable*)

declare void @free_executable(%Executable*)

declare void @free_execution_result(%ExecutionResult*)

declare i1 @get_readout_bit(%ExecutionResult*, i64, i64)

declare void @panic_on_failure(%ExecutionResult*)

declare void @set_param(%Executable*, i8*, i32, double)

declare void @wrap_in_shots(%Executable*, i32)

declare %ExecutableCache* @create_executable_cache(i32)

declare void @add_executable_cache_item(%ExecutableCache*, i32, i8*)

declare %Executable* @read_from_executable_cache(%ExecutableCache*, i32)

declare void @free_executable_cache(%ExecutableCache*)

define void @populate_executable_array() {
entry:
  %0 = call %ExecutableCache* @create_executable_cache(i32 0)
  store %ExecutableCache* %0, %ExecutableCache** @executable_cache, align 8
  ret void
}

attributes #0 = { "EntryPoint" "requiredQubits"="3" "requiredResults"="3" }

